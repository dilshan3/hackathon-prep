name: Logistics API CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/**'

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run linting
        working-directory: ./backend
        run: npm run lint

      - name: Run type checking
        working-directory: ./backend
        run: npm run type-check

      - name: Generate Prisma client
        working-directory: ./backend
        run: npm run db:generate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          DIRECT_URL: postgresql://test:test@localhost:5432/test

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Run tests
        working-directory: ./backend
        run: npm run test:coverage
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-key-for-testing-purposes-only
          JWT_REFRESH_SECRET: test-jwt-refresh-secret-key-for-testing-purposes-only
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          DIRECT_URL: postgresql://test:test@localhost:5432/test

      - name: Upload coverage
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Security audit
        working-directory: ./backend
        run: npm audit --audit-level=high

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://logistics-issue-tracker-qq6oi9wxc.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        run: npm run db:generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Deploy to Vercel
        working-directory: ./backend
        run: npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      - name: Health check
        run: |
          sleep 30
          curl -f https://logistics-issue-tracker-qq6oi9wxc.vercel.app/health || exit 1

      - name: Deployment status
        run: echo "âœ… Deployed to https://logistics-issue-tracker-qq6oi9wxc.vercel.app"
